DOWNLOAD ON CLIENT

$ curl -L https://istio.io/downloadIstio | sh -

Move to the package dir

$ cd istio-1.11.3

Add the istioctl client to my path

$ export PATH=$PWD/bin:$PATH

INSTALL ISTIO

$ istioctl install --set profile=demo -y
✔ Istio core installed
✔ Istiod installed
✔ Egress gateways installed
✔ Ingress gateways installed
✔ Installation complete

Add a namespace label to instruct istio to automatically inject Envoy sidecar proxies when you deploy your application later

$ kubectl label namespace default istio-injection=enabled

-----

DEPLOY hello world app with envoy proxy

$ kubectl apply -f <(istioctl kube-inject -f helloworld.yaml)

Apply gateway to access to the hello-app

$ kubectl apply -f helloworld-gw.yaml

Get the full address of loadbalancer

$ kubectl get svc -n istio-system

Check whether it works properly

$ curl <ELB.aws.com>/hell

-----

Adding the pod of helloworld-v2 with envoy proxy
$ kubectl apply -f <(istioctl kube-inject -f helloworld-v2.yaml)

Overwrite new rule in gateway
$ kubectl apply -f helloworld-v2-routing.yaml

Get the full address of ELB

$ kubectl get svc -n istio-system -o wide

This request is no longer worked
$ curl <ELB.aws.com>/hello -v

Check the new rule applied
$ kubectl get virtualservice

test the routing rule
$ curl <ELB.aws.com> -H "host: hello.example.com"

get the access to v2
$ curl <ELB.awscom> -H "host: hello.example.com" -H "end-user: john"

----
IMPLEMENT CANARY DEPLOYMENT

$ kubectl apply -f helloworld-v2-canary.yaml

Check the virtualservice changed
$ kubectl describe virtualservice helloworld

To see getting approximately nine times v1 and 1 time v2
$ for ((i=1;i<=10;i++)); do curl <ELB.aws.com> -H "Host: hello.example.com" ; done

----
IMPLEMENT RETRYING POD

$ kubectl apply -f helloworld-v3.yaml

Get the information about destinations rule
$ kubectl describe destinationrule hello

Access the v3 app
$ curl <ELB.aws.com> -H "Host: hello-v3.example.com"

Check result
$ for ((i=1;i<=10;i++)); do time curl <ELB.aws.com> -H "Host: hello-v3.example.com" ; done

----
MUTUAL TLS
Delete older demo, otherwise conflict with new one
$ kubectl delete pods --all --force
$ istioctl manifest generate --set profile=demo | kubectl delete --ignore-not-found=true -f -
$ kubectl delete namespace istio-system
$ kubectl label namespace default istio-injection-

apply tls-demo manifest with envoy
$ kubectl apply -f <(istioctl kube-inject -f helloworld-tls.yaml)
apply legacy-demo manifest
$ kubectl apply -f helloworld-tls-legacy.yaml
Check the elb service
$ kubectl get svc -n istio-system -o wide

test 2type application with curl
$ curl <elb.aws.com> -H "Host: hello-tls.example.com"
$ curl <elb.aws.com> -H "Host: hello-tls-reverse.example.com"

-----
Estio Egress traffic

apply pods

$ kubectl apply -f <(istioctl kube-inject -f helloworld.yaml)

login hello pod
$ kubectl exec -it hello-xxxxxxx -- sh

access to world2 pod and output contents
# wget world-2:8080
# cat index.html
# rm index.html

check whether we have access to the outside of the world

# wget ifconfig.co
# wget www.google.com

apply Service Entry object

$ kubectl apply -f external-service.yaml

